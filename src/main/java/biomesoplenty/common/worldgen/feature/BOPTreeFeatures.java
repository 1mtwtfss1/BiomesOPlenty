/*******************************************************************************
 * Copyright 2021, the Glitchfiend Team.
 * All rights reserved.
 ******************************************************************************/
package biomesoplenty.common.worldgen.feature;

import biomesoplenty.api.block.BOPBlocks;
import biomesoplenty.common.worldgen.feature.configurations.*;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.LeavesBlock;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.configurations.TreeConfiguration;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.treedecorators.BeehiveDecorator;
import net.minecraftforge.registries.RegistryObject;

import static biomesoplenty.common.util.worldgen.BOPFeatureUtils.register;

public class BOPTreeFeatures
{
    // Standard trees
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> FLOWERING_OAK_TREE = register("flowering_oak_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.OAK_LEAVES)).altFoliage(BlockStateProvider.simple(BOPBlocks.FLOWERING_OAK_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> FLOWERING_OAK_TREE_BEES = register("flowering_oak_tree_bees", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.OAK_LEAVES)).altFoliage(BlockStateProvider.simple(BOPBlocks.FLOWERING_OAK_LEAVES.get())).decorator(new BeehiveDecorator(0.05f)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> JACARANDA_TREE = register("jacaranda_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.JACARANDA_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.JACARANDA_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> JACARANDA_TREE_BEES = register("jacaranda_tree_bees", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.JACARANDA_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.JACARANDA_LEAVES.get())).decorator(new BeehiveDecorator(0.02f)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> MAPLE_TREE = register("maple_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().foliage(BlockStateProvider.simple(BOPBlocks.MAPLE_LEAVES.get())).minHeight(5).maxHeight(10).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> ORANGE_AUTUMN_TREE = register("orange_autumn_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.DARK_OAK_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.ORANGE_AUTUMN_LEAVES.get())).minHeight(5).maxHeight(8).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> ORIGIN_TREE = register("origin_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.OAK_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.ORIGIN_LEAVES.get())).minHeight(5).maxHeight(8).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> PINK_CHERRY_TREE = register("pink_cherry_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.CHERRY_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.PINK_CHERRY_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> PINK_CHERRY_TREE_BEES = register("pink_cherry_tree_bees", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.CHERRY_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.PINK_CHERRY_LEAVES.get())).decorator(new BeehiveDecorator(0.05f)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> RAINBOW_BIRCH_TREE = register("rainbow_birch_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.BIRCH_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.RAINBOW_BIRCH_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> SMALL_DEAD_TREE = register("small_dead_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.DEAD_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.DEAD_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> WHITE_CHERRY_TREE = register("white_cherry_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.CHERRY_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.WHITE_CHERRY_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> WHITE_CHERRY_TREE_BEES = register("white_cherry_tree_bees", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.CHERRY_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.WHITE_CHERRY_LEAVES.get())).decorator(new BeehiveDecorator(0.05f)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> WILLOW_TREE = register("willow_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.WILLOW_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.WILLOW_LEAVES.get())).vine(BlockStateProvider.simple(BOPBlocks.WILLOW_VINE.get())).minHeight(6).maxHeight(10).leavesOffset(0).maxLeavesRadius(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> YELLOW_AUTUMN_TREE = register("yellow_autumn_tree", BOPBaseFeatures.BASIC_TREE, () -> new BasicTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.BIRCH_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.YELLOW_AUTUMN_LEAVES.get())).minHeight(5).maxHeight(8).build());

    // Big trees
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_FLOWERING_OAK_TREE = register("big_flowering_oak_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.OAK_LEAVES)).altFoliage(BlockStateProvider.simple(BOPBlocks.FLOWERING_OAK_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_JACARANDA_TREE = register("big_jacaranda_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.JACARANDA_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.JACARANDA_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_MAPLE_TREE = register("big_maple_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().foliage(BlockStateProvider.simple(BOPBlocks.MAPLE_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_OAK_TREE = register("big_oak_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_ORANGE_AUTUMN_TREE = register("big_orange_autumn_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.DARK_OAK_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.ORANGE_AUTUMN_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_ORIGIN_TREE = register("big_origin_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.OAK_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.ORIGIN_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_PINK_CHERRY_TREE = register("big_pink_cherry_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.CHERRY_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.PINK_CHERRY_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_RAINBOW_BIRCH_TREE = register("big_rainbow_birch_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.BIRCH_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.RAINBOW_BIRCH_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_WHITE_CHERRY_TREE = register("big_white_cherry_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.CHERRY_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.WHITE_CHERRY_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_YELLOW_AUTUMN_TREE = register("big_yellow_autumn_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.BIRCH_LOG)).foliage(BlockStateProvider.simple(BOPBlocks.YELLOW_AUTUMN_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> DYING_TREE = register("dying_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.DEAD_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.DEAD_LEAVES.get())).maxHeight(10).foliageHeight(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> DYING_TREE_WASTELAND = register("dying_tree_wasteland", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.DEAD_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.DEAD_LEAVES.get())).maxHeight(10).foliageHeight(1).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> GIANT_TREE = register("giant_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.DARK_OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.DARK_OAK_LEAVES.defaultBlockState().setValue(LeavesBlock.PERSISTENT, true))).minHeight(15).maxHeight(20).trunkWidth(4).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> SPARSE_ACACIA_TREE = register("sparse_acacia_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.ACACIA_LOG)).foliage(BlockStateProvider.simple(Blocks.ACACIA_LEAVES)).maxHeight(8).foliageHeight(1).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> SPARSE_OAK_TREE = register("sparse_oak_tree", BOPBaseFeatures.BIG_TREE, () -> new BigTreeConfiguration.Builder().maxHeight(10).foliageHeight(2).build());

    // Conifer trees
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> FIR_TREE = register("fir_tree", BOPBaseFeatures.TAIGA_TREE, () -> createFir().minHeight(5).maxHeight(28).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> FIR_TREE_LARGE = register("fir_tree_large", BOPBaseFeatures.TAIGA_TREE, () -> createFir().minHeight(20).maxHeight(40).trunkWidth(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> FIR_TREE_SMALL = register("fir_tree_small", BOPBaseFeatures.TAIGA_TREE, () -> createFir().minHeight(5).maxHeight(11).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> TALL_SPRUCE_TREE = register("tall_spruce_tree", BOPBaseFeatures.TAIGA_TREE, () -> new TaigaTreeConfiguration.Builder().maxHeight(13).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> TALL_SPRUCE_TREE_BEES = register("tall_spruce_tree_bees", BOPBaseFeatures.TAIGA_TREE, () -> new TaigaTreeConfiguration.Builder().maxHeight(13).decorator(new BeehiveDecorator(0.05f)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> TALL_UMBRAN_TREE = register("tall_umbran_tree", BOPBaseFeatures.TAIGA_TREE, () -> new TaigaTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.UMBRAN_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.UMBRAN_LEAVES.get())).minHeight(20).maxHeight(30).trunkWidth(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> UMBRAN_TREE = register("umbran_tree", BOPBaseFeatures.TAIGA_TREE, () -> new TaigaTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.UMBRAN_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.UMBRAN_LEAVES.get())).maxHeight(20).build());

    // Poplar trees
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_MAGIC_TREE = register("big_magic_tree", BOPBaseFeatures.POPLAR_TREE, () -> new PoplarTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.MAGIC_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.MAGIC_LEAVES.get())).minHeight(16).maxHeight(20).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> DARK_OAK_POPLAR_TREE = register("dark_oak_poplar_tree", BOPBaseFeatures.POPLAR_TREE, () -> new PoplarTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.DARK_OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.DARK_OAK_LEAVES)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> MAGIC_TREE = register("magic_tree", BOPBaseFeatures.POPLAR_TREE, () -> new PoplarTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.MAGIC_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.MAGIC_LEAVES.get())).minHeight(8).maxHeight(12).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> SPRUCE_POPLAR_TREE = register("spruce_poplar_tree", BOPBaseFeatures.POPLAR_TREE, () -> new PoplarTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.SPRUCE_LOG)).foliage(BlockStateProvider.simple(Blocks.SPRUCE_LEAVES)).build());

    // Swamp trees
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> CYPRESS_TREE = register("cypress_tree", BOPBaseFeatures.CYPRESS_TREE, () -> new CypressTreeConfiguration.Builder().build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> CYPRESS_TREE_MEDIUM = register("cypress_tree_medium", BOPBaseFeatures.CYPRESS_TREE, () -> new CypressTreeConfiguration.Builder().minHeight(18).maxHeight(25).trunkWidth(2).build());

    // Bush trees
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> ACACIA_BUSH_TREE = register("acacia_bush_tree", BOPBaseFeatures.BUSH_TREE, () -> new BasicTreeConfiguration.Builder().maxHeight(2).minHeight(2).trunk(BlockStateProvider.simple(Blocks.ACACIA_LOG)).foliage(BlockStateProvider.simple(Blocks.ACACIA_LEAVES)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> FLOWERING_OAK_BUSH = register("flowering_oak_bush", BOPBaseFeatures.BUSH_TREE, () -> new BasicTreeConfiguration.Builder().maxHeight(2).minHeight(2).trunk(BlockStateProvider.simple(Blocks.OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.OAK_LEAVES)).altFoliage(BlockStateProvider.simple(BOPBlocks.FLOWERING_OAK_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> JUNGLE_BUSH = register("jungle_bush", BOPBaseFeatures.BUSH_TREE, () -> new BasicTreeConfiguration.Builder().maxHeight(2).minHeight(2).trunk(BlockStateProvider.simple(Blocks.JUNGLE_LOG)).foliage(BlockStateProvider.simple(Blocks.JUNGLE_LEAVES)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> OAK_BUSH = register("oak_bush", BOPBaseFeatures.BUSH_TREE, () -> new BasicTreeConfiguration.Builder().maxHeight(2).minHeight(2).trunk(BlockStateProvider.simple(Blocks.OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.OAK_LEAVES)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> SPRUCE_BUSH = register("spruce_bush", BOPBaseFeatures.BUSH_TREE, () -> new BasicTreeConfiguration.Builder().maxHeight(2).minHeight(2).trunk(BlockStateProvider.simple(Blocks.SPRUCE_LOG)).foliage(BlockStateProvider.simple(Blocks.SPRUCE_LEAVES)).build());

    // Twiglets
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> ACACIA_TWIGLET = register("acacia_twiglet", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.ACACIA_LOG)).foliage(BlockStateProvider.simple(Blocks.ACACIA_LEAVES)).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> ACACIA_TWIGLET_SMALL = register("acacia_twiglet_small", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.ACACIA_LOG)).foliage(BlockStateProvider.simple(Blocks.ACACIA_LEAVES)).minHeight(1).maxHeight(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> BIG_HELLBARK_TREE = register("big_hellbark_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.HELLBARK_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.HELLBARK_LEAVES.get())).minHeight(3).maxHeight(7).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> DEAD_TREE_WASTELAND = register("dead_tree_wasteland", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunkFruit(BlockStateProvider.simple(BOPBlocks.DEAD_BRANCH.get())).leafChance(0.0F, 0.0F).trunk(BlockStateProvider.simple(BOPBlocks.DEAD_LOG.get())).foliage(BlockStateProvider.simple(Blocks.AIR)).minHeight(6).maxHeight(10).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> DEAD_TWIGLET_TREE = register("dead_twiglet_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunkFruit(BlockStateProvider.simple(BOPBlocks.DEAD_BRANCH.get())).leafChance(0.05F, 0.25F).trunk(BlockStateProvider.simple(BOPBlocks.DEAD_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.DEAD_LEAVES.get())).minHeight(6).maxHeight(10).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> DEAD_TWIGLET_TREE_SMALL = register("dead_twiglet_tree_small", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.DEAD_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.DEAD_LEAVES.get())).minHeight(1).maxHeight(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> HELLBARK_TREE = register("hellbark_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.HELLBARK_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.HELLBARK_LEAVES.get())).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> JUNGLE_TWIGLET_TREE = register("jungle_twiglet_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.JUNGLE_LOG)).foliage(BlockStateProvider.simple(Blocks.JUNGLE_LEAVES)).trunkFruit(BlockStateProvider.simple(Blocks.COCOA)).minHeight(1).maxHeight(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> MAPLE_TWIGLET_TREE = register("maple_twiglet_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().foliage(BlockStateProvider.simple(BOPBlocks.MAPLE_LEAVES.get())).minHeight(1).maxHeight(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> SPRUCE_TWIGLET_TREE = register("spruce_twiglet_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.SPRUCE_LOG)).foliage(BlockStateProvider.simple(Blocks.SPRUCE_LEAVES)).minHeight(1).maxHeight(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> TALL_DEAD_TWIGLET_TREE = register("tall_dead_twiglet_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunkFruit(BlockStateProvider.simple(BOPBlocks.DEAD_BRANCH.get())).leafChance(0.15F, 0.6F).trunk(BlockStateProvider.simple(BOPBlocks.DEAD_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.DEAD_LEAVES.get())).minHeight(12).maxHeight(18).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> TALL_TWIGLET_TREE = register("tall_twiglet_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().minHeight(2).maxHeight(4).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> TWIGLET_TREE = register("twiglet_tree", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().minHeight(1).maxHeight(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> TWIGLET_TREE_VOLCANO = register("twiglet_tree_volcano", BOPBaseFeatures.TWIGLET_TREE, () -> new TwigletTreeConfiguration.Builder().trunk(BlockStateProvider.simple(Blocks.DARK_OAK_LOG)).foliage(BlockStateProvider.simple(Blocks.DARK_OAK_LEAVES)).minHeight(1).maxHeight(2).build());

    // Special trees
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> REDWOOD_TREE = register("redwood_tree", BOPBaseFeatures.REDWOOD_TREE, () -> createRedwood().minHeight(10).maxHeight(30).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> REDWOOD_TREE_MEDIUM = register("redwood_tree_medium", BOPBaseFeatures.REDWOOD_TREE, () -> createRedwood().minHeight(25).maxHeight(40).trunkWidth(2).build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> MAHOGANY_TREE = register("mahogany_tree", BOPBaseFeatures.MAHOGANY_TREE, () -> new MahoganyTreeConfiguration.Builder().build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> PALM_TREE = register("palm_tree", BOPBaseFeatures.PALM_TREE, () -> new PalmTreeConfiguration.Builder().build());
    public static final RegistryObject<ConfiguredFeature<TreeConfiguration, ?>> REDWOOD_TREE_LARGE = register("redwood_tree_large", BOPBaseFeatures.REDWOOD_TREE, () -> createRedwood().minHeight(45).maxHeight(60).trunkWidth(3).build());

    private static TaigaTreeConfiguration.Builder createFir()
    {
        return new TaigaTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.FIR_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.FIR_LEAVES.get()));
    }

    private static TaigaTreeConfiguration.Builder createRedwood()
    {
        return new TaigaTreeConfiguration.Builder().trunk(BlockStateProvider.simple(BOPBlocks.REDWOOD_LOG.get())).foliage(BlockStateProvider.simple(BOPBlocks.REDWOOD_LEAVES.get()));
    }

    public static void setup() {}
}
