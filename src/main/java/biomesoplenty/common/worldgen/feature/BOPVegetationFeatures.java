/*******************************************************************************
 * Copyright 2021, the Glitchfiend Team.
 * All rights reserved.
 ******************************************************************************/
package biomesoplenty.common.worldgen.feature;

import biomesoplenty.api.block.BOPBlocks;
import biomesoplenty.common.worldgen.placement.BOPTreePlacements;
import com.google.common.collect.ImmutableList;
import net.minecraft.core.BlockPos;
import net.minecraft.data.worldgen.features.FeatureUtils;
import net.minecraft.data.worldgen.placement.PlacementUtils;
import net.minecraft.data.worldgen.placement.TreePlacements;
import net.minecraft.util.random.SimpleWeightedRandomList;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.Feature;
import net.minecraft.world.level.levelgen.feature.WeightedPlacedFeature;
import net.minecraft.world.level.levelgen.feature.configurations.*;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.levelgen.feature.stateproviders.WeightedStateProvider;
import net.minecraftforge.registries.RegistryObject;

import static biomesoplenty.common.util.worldgen.BOPFeatureUtils.register;

public class BOPVegetationFeatures
{
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> BIG_DRIPLEAF = register("big_dripleaf", BOPBaseFeatures.BIG_DRIPLEAF, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> BIG_PUMPKIN = register("big_pumpkin", BOPBaseFeatures.BIG_PUMPKIN, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> BRAMBLE = register("bramble", BOPBaseFeatures.BRAMBLE, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> GOLDENROD = register("goldenrod", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.GOLDENROD.get()))));
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> HUGE_CLOVER = register("huge_clover", BOPBaseFeatures.HUGE_CLOVER, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> HUGE_TOADSTOOL = register("huge_toadstool", BOPBaseFeatures.HUGE_TOADSTOOL, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> DRIPSTONE_SPLATTER = register("dripstone_splatter", BOPBaseFeatures.DRIPSTONE_SPLATTER, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> MOSS_SPLATTER = register("moss_splatter", BOPBaseFeatures.MOSS_SPLATTER, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> MYCELIUM_SPLATTER = register("mycelium_splatter", BOPBaseFeatures.MYCELIUM_SPLATTER, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BARLEY = register("patch_barley", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.BARLEY.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BLUE_HYDRANGEA = register("patch_blue_hydrangea", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.BLUE_HYDRANGEA.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_BUSH = register("patch_bush", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.BUSH.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_CATTAIL = register("patch_cattail", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.CATTAIL.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_CLOVER = register("patch_clover", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.CLOVER.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DEAD_GRASS = register("patch_dead_grass", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.DEAD_GRASS.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DESERT_GRASS = register("patch_desert_grass", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.DESERT_GRASS.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_DUNE_GRASS = register("patch_dune_grass", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.DUNE_GRASS.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_FERN = register("patch_fern", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.FERN))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_ICY_IRIS = register("patch_icy_iris", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.ICY_IRIS.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_LILAC = register("patch_lilac", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.LILAC))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_PEONY = register("patch_peony", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.PEONY))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_REED = register("patch_reed", Feature.RANDOM_PATCH, () -> waterPatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.REED.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SEA_OATS = register("patch_sea_oats", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.SEA_OATS.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_SPROUTS = register("patch_sprouts", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.SPROUT.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> PATCH_WATERGRASS = register("patch_watergrass", Feature.RANDOM_PATCH, () -> waterPatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.WATERGRASS.get()))));
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> PUMPKIN_PATCH = register("pumpkin_patch", BOPBaseFeatures.PUMPKIN_PATCH, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> RAINFOREST_CLIFFS_VINES = register("rainforest_cliffs_vines", BOPBaseFeatures.RAINFOREST_CLIFFS_VINES, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> ROSE_BUSH = register("rose_bush", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.ROSE_BUSH))));
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> SCATTERED_ROCKS = register("scattered_rocks", BOPBaseFeatures.SCATTERED_ROCKS, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> SCRUB = register("scrub", BOPBaseFeatures.SCRUB, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> SUNFLOWER = register("sunflower", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.SUNFLOWER))));
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> SHORT_BAMBOO = register("short_bamboo", BOPBaseFeatures.SHORT_BAMBOO, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> SMALL_DRIPLEAF = register("small_dripleaf", BOPBaseFeatures.SMALL_DRIPLEAF, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> SMALL_RED_MUSHROOM = register("small_red_mushroom", BOPBaseFeatures.SMALL_RED_MUSHROOM, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<NoneFeatureConfiguration, ?>> SMALL_TOADSTOOL = register("small_toadstool", BOPBaseFeatures.SMALL_TOADSTOOL, () -> NoneFeatureConfiguration.INSTANCE);
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> TOADSTOOL_NORMAL = register("toadstool_normal", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.TOADSTOOL.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> WASTELAND_GRASS = register("wasteland_grass", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(BOPBlocks.DESERT_GRASS.get().defaultBlockState(), 1).add(BOPBlocks.DEAD_GRASS.get().defaultBlockState(), 2).build()))));

    // Flowers
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_CHERRY_BLOSSOM_GROVE = register("flower_cherry_blossom_grove", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(BOPBlocks.PINK_DAFFODIL.get().defaultBlockState(), 1).add(Blocks.LILY_OF_THE_VALLEY.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_CLOVER_PATCH = register("flower_clover_patch", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.AZURE_BLUET))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_CONIFEROUS_FOREST = register("flower_coniferous_forest", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.CORNFLOWER.defaultBlockState(), 1).add(Blocks.OXEYE_DAISY.defaultBlockState(), 1).add(Blocks.POPPY.defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_DEFAULT_EXTENDED = register("flower_default_extended", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.OXEYE_DAISY.defaultBlockState(), 1).add(Blocks.POPPY.defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_FIELD_1 = register("flower_field_1", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.LILY_OF_THE_VALLEY.defaultBlockState(), 1).add(Blocks.AZURE_BLUET.defaultBlockState(), 1).add(Blocks.POPPY.defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_FIELD_2 = register("flower_field_2", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.PINK_TULIP.defaultBlockState(), 1).add(Blocks.RED_TULIP.defaultBlockState(), 1).add(Blocks.WHITE_TULIP.defaultBlockState(), 1).add(Blocks.ORANGE_TULIP.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_LAVENDER = register("flower_lavender", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.LAVENDER.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_MOOR = register("flower_moor", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.ALLIUM.defaultBlockState(), 1).add(BOPBlocks.VIOLET.get().defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_MYSTIC_GROVE = register("flower_mystic_grove", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(BOPBlocks.GLOWFLOWER.get().defaultBlockState(), 1).add(BOPBlocks.PINK_DAFFODIL.get().defaultBlockState(), 1).add(Blocks.LILY_OF_THE_VALLEY.defaultBlockState(), 1).add(Blocks.AZURE_BLUET.defaultBlockState(), 1).add(Blocks.ALLIUM.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_OMINOUS_WOODS = register("flower_ominous_woods", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.WITHER_ROSE))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_ORIGIN_VALLEY = register("flower_origin_valley", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(BOPBlocks.ROSE.get().defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_POPPY = register("flower_poppy", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.POPPY))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_RAINFOREST = register("flower_rainforest", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(BOPBlocks.ORANGE_COSMOS.get().defaultBlockState(), 1).add(Blocks.POPPY.defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_SHRUBLAND = register("flower_shrubland", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.ALLIUM))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_SNOWY = register("flower_snowy", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(BOPBlocks.VIOLET.get().defaultBlockState(), 1).add(Blocks.POPPY.defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_TROPICS = register("flower_tropics", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(BOPBlocks.PINK_HIBISCUS.get().defaultBlockState(), 1).add(Blocks.POPPY.defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_VIOLET = register("flower_violet", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.VIOLET.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_WASTELAND = register("flower_wasteland", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.WILTED_LILY.get()))));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_WETLAND = register("flower_wetland", Feature.FLOWER, () -> grassPatch(new WeightedStateProvider(SimpleWeightedRandomList.<BlockState>builder().add(Blocks.BLUE_ORCHID.defaultBlockState(), 1).add(Blocks.POPPY.defaultBlockState(), 1).add(Blocks.DANDELION.defaultBlockState(), 1)), 64));
    public static final RegistryObject<ConfiguredFeature<RandomPatchConfiguration, ?>> FLOWER_WILDFLOWER = register("flower_wildflower", Feature.RANDOM_PATCH, () -> FeatureUtils.simplePatchConfiguration(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(BlockStateProvider.simple(BOPBlocks.WILDFLOWER.get()))));

    // Trees
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_BAMBOO_GROVE = register("trees_bamboo_grove", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.WHITE_CHERRY_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.PINK_CHERRY_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.BIG_WHITE_CHERRY_TREE_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.BIG_PINK_CHERRY_TREE_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.BIG_FLOWERING_TREE_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.FLOWERING_OAK_BUSH_CHECKED.getHolder().orElseThrow(), 0.3F)), BOPTreePlacements.FLOWERING_OAK_TREE_BEES_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_BAYOU = register("trees_bayou", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.CYPRESS_TREE_MEDIUM_CHECKED.getHolder().orElseThrow(), 0.3F)), BOPTreePlacements.CYPRESS_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_BOG = register("trees_bog", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.SPRUCE_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.4F), new WeightedPlacedFeature(BOPTreePlacements.MAPLE_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.6F)), BOPTreePlacements.TWIGLET_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_BOREAL_FOREST = register("trees_boreal_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.OAK_BUSH_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.FIR_TREE_SMALL_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.FIR_TREE_CHECKED.getHolder().orElseThrow(), 0.025F), new WeightedPlacedFeature(BOPTreePlacements.BIG_RAINBOW_BIRCH_TREE_CHECKED.getHolder().orElseThrow(), 0.4F)), BOPTreePlacements.RAINBOW_BIRCH_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_CHERRY_BLOSSOM_GROVE = register("trees_cherry_blossom_grove", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.WHITE_CHERRY_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.PINK_CHERRY_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.BIG_WHITE_CHERRY_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.FLOWERING_OAK_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.15F), new WeightedPlacedFeature(BOPTreePlacements.FLOWERING_OAK_BUSH_CHECKED.getHolder().orElseThrow(), 0.3F)), BOPTreePlacements.BIG_PINK_CHERRY_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_CONIFEROUS_FOREST = register("trees_coniferous_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.FIR_TREE_CHECKED.getHolder().orElseThrow(), 0.33333334F)), BOPTreePlacements.FIR_TREE_LARGE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_DEAD_FOREST = register("trees_dead_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.DYING_TREE_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.TALL_SPRUCE_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.SMALL_DEAD_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.DEAD_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.2F)), TreePlacements.OAK_CHECKED));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_DENSE_WOODLAND = register("trees_dense_woodland", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.BIG_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.5F)), TreePlacements.OAK_CHECKED));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_DRYLAND = register("trees_dryland", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.4F), new WeightedPlacedFeature(BOPTreePlacements.SPARSE_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.2F)), BOPTreePlacements.ACACIA_TWIGLET_SMALL_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_FIELD = register("trees_field", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.TALL_SPRUCE_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.OAK_BUSH_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_FIELD_FOREST = register("trees_field_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.OAK_BUSH_CHECKED.getHolder().orElseThrow(), 0.25F)), BOPTreePlacements.TALL_SPRUCE_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_FUNGAL_JUNGLE = register("trees_fungal_jungle", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(TreePlacements.OAK_CHECKED, 0.1F), new WeightedPlacedFeature(BOPTreePlacements.BIG_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.05F)), BOPTreePlacements.JUNGLE_BUSH_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_JADE_CLIFFS = register("trees_jade_cliffs", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.TALL_SPRUCE_TREE_CHECKED.getHolder().orElseThrow(), 0.075F), new WeightedPlacedFeature(TreePlacements.PINE_CHECKED, 0.075F)), BOPTreePlacements.SPRUCE_BUSH_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_LAVENDER_FIELD = register("trees_lavender_field", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.FLOWERING_OAK_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.BIG_FLOWERING_TREE_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.BIG_JACARANDA_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.JACARANDA_TREE_BEES_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_LAVENDER_FOREST = register("trees_lavender_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.FLOWERING_OAK_TREE_BEES_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.BIG_FLOWERING_TREE_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.BIG_JACARANDA_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.JACARANDA_TREE_BEES_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_LUSH_DESERT = register("trees_lush_desert", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.ACACIA_BUSH_TREE_CHECKED.getHolder().orElseThrow(), 0.4F), new WeightedPlacedFeature(BOPTreePlacements.SPARSE_ACACIA_TREE_CHECKED.getHolder().orElseThrow(), 0.2F)), BOPTreePlacements.ACACIA_TWIGLET_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_MAPLE_FOREST = register("trees_maple_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.TALL_SPRUCE_TREE_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.BIG_MAPLE_TREE_CHECKED.getHolder().orElseThrow(), 0.3F)), BOPTreePlacements.MAPLE_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_MEDITERRANEAN_FOREST = register("tress_mediterranean_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.SPARSE_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.DARK_OAK_POPLAR_TREE_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.SPRUCE_POPLAR_TREE_CHECKED.getHolder().orElseThrow(), 0.4F), new WeightedPlacedFeature(BOPTreePlacements.FLOWERING_OAK_BUSH_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.OAK_BUSH_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_MUSKEG = register("trees_muskeg", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.TALL_DEAD_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.DEAD_TWIGLET_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_OLD_GROWTH_DEAD_FOREST = register("trees_old_growth_dead_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.DYING_TREE_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.DEAD_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.TALL_SPRUCE_TREE_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.SMALL_DEAD_TREE_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(TreePlacements.OAK_CHECKED, 0.05F)), BOPTreePlacements.TALL_DEAD_TWIGLET_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_MYSTIC_GROVE = register("trees_mystic_grove", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.BIG_FLOWERING_TREE_CHECKED.getHolder().orElseThrow(), 0.15F), new WeightedPlacedFeature(BOPTreePlacements.JACARANDA_TREE_CHECKED.getHolder().orElseThrow(), 0.25F), new WeightedPlacedFeature(BOPTreePlacements.BIG_MAGIC_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.GIANT_TREE_CHECKED.getHolder().orElseThrow(), 0.02F)), BOPTreePlacements.MAGIC_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_OMINOUS_WOODS = register("trees_ominous_woods", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.DEAD_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.05F), new WeightedPlacedFeature(BOPTreePlacements.DYING_TREE_CHECKED.getHolder().orElseThrow(), 0.15F), new WeightedPlacedFeature(BOPTreePlacements.TALL_UMBRAN_TREE_CHECKED.getHolder().orElseThrow(), 0.7F)), BOPTreePlacements.UMBRAN_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_ORCHARD = register("trees_orchard", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.BIG_FLOWERING_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.FLOWERING_OAK_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_ORIGIN_VALLEY = register("trees_origin_valley", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.BIG_ORIGIN_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.ORIGIN_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_PRAIRIE = register("trees_prairie", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.BIG_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.SPARSE_OAK_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_RAINFOREST = register("trees_rainforest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(TreePlacements.JUNGLE_TREE_CHECKED, 0.1F)), BOPTreePlacements.MAHOGANY_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_RAINFOREST_CLIFFS = register("trees_rainforest_cliffs", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.JUNGLE_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.4F), new WeightedPlacedFeature(BOPTreePlacements.MAHOGANY_TREE_CHECKED.getHolder().orElseThrow(), 0.05F)), BOPTreePlacements.OAK_BUSH_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_RAINFOREST_FLOODPLAIN = register("trees_rainforest_floodplain", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.SPARSE_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.BIG_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.OAK_BUSH_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_REDWOOD_FOREST = register("trees_redwood_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.REDWOOD_TREE_CHECKED.getHolder().orElseThrow(), 0.3f), new WeightedPlacedFeature(BOPTreePlacements.REDWOOD_TREE_LARGE_CHECKED.getHolder().orElseThrow(), 0.5f)), BOPTreePlacements.REDWOOD_TREE_MEDIUM_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_SEASONAL_FOREST = register("trees_seasonal_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(TreePlacements.OAK_CHECKED, 0.05F), new WeightedPlacedFeature(TreePlacements.FANCY_OAK_CHECKED, 0.025F), new WeightedPlacedFeature(BOPTreePlacements.MAPLE_TREE_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.YELLOW_AUTUMN_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.BIG_MAPLE_TREE_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.BIG_YELLOW_AUTUMN_TREE_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.BIG_ORANGE_AUTUMN_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.ORANGE_AUTUMN_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_SEASONAL_ORCHARD = register("trees_seasonal_orchard", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.BIG_YELLOW_AUTUMN_TREE_CHECKED.getHolder().orElseThrow(), 0.05F)), BOPTreePlacements.YELLOW_AUTUMN_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_SEASONAL_PUMPKIN_PATCH = register("trees_seasonal_pumpkin_patch", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.OAK_BUSH_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.ORANGE_AUTUMN_TREE_CHECKED.getHolder().orElseThrow(), 0.1F), new WeightedPlacedFeature(BOPTreePlacements.BIG_ORANGE_AUTUMN_TREE_CHECKED.getHolder().orElseThrow(), 0.05F)), BOPTreePlacements.TWIGLET_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_SNOWY_CONIFEROUS_FOREST = register("trees_snowy_coniferous_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.FIR_TREE_CHECKED.getHolder().orElseThrow(), 0.4F)), BOPTreePlacements.FIR_TREE_LARGE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_SNOWY_MAPLE_FOREST = register("trees_snowy_maple_forest", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.TALL_SPRUCE_TREE_CHECKED.getHolder().orElseThrow(), 0.2F), new WeightedPlacedFeature(BOPTreePlacements.BIG_MAPLE_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.MAPLE_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_TROPICS = register("trees_tropics", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.JUNGLE_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.FLOWERING_OAK_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.PALM_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_TUNDRA = register("trees_tundra", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.DEAD_TWIGLET_TREE_SMALL_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.MAPLE_TWIGLET_TREE_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_WOODED_SCRUBLAND = register("trees_wooded_scrubland", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.SPRUCE_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.3F), new WeightedPlacedFeature(BOPTreePlacements.TALL_TWIGLET_TREE_CHECKED.getHolder().orElseThrow(), 0.1F)), BOPTreePlacements.ACACIA_TWIGLET_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_WASTELAND = register("trees_wasteland", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.DEAD_TREE_WASTELAND_CHECKED.getHolder().orElseThrow(), 0.2F)), BOPTreePlacements.DYING_TREE_WASTELAND_CHECKED.getHolder().orElseThrow()));
    public static final RegistryObject<ConfiguredFeature<RandomFeatureConfiguration, ?>> TREES_WETLAND = register("trees_wetland", Feature.RANDOM_SELECTOR, () -> new RandomFeatureConfiguration(ImmutableList.of(new WeightedPlacedFeature(BOPTreePlacements.WILLOW_TREE_CHECKED.getHolder().orElseThrow(), 0.25F)), BOPTreePlacements.TALL_SPRUCE_TREE_CHECKED.getHolder().orElseThrow()));

    private static RandomPatchConfiguration grassPatch(BlockStateProvider stateProvider, int tries)
    {
        return FeatureUtils.simpleRandomPatchConfiguration(tries, PlacementUtils.onlyWhenEmpty(Feature.SIMPLE_BLOCK, new SimpleBlockConfiguration(stateProvider)));
    }

    private static <FC extends FeatureConfiguration, F extends Feature<FC>> RandomPatchConfiguration waterPatchConfiguration(F feature, FC configuration, int tries)
    {
        return FeatureUtils.simpleRandomPatchConfiguration(tries, PlacementUtils.filtered(feature, configuration, BlockPredicate.matchesBlocks(BlockPos.ZERO, Blocks.WATER)));
    }

    private static <FC extends FeatureConfiguration, F extends Feature<FC>> RandomPatchConfiguration waterPatchConfiguration(F feature, FC configuration)
    {
        return waterPatchConfiguration(feature, configuration, 96);
    }

    public static void setup() {}
}
